# -*- coding: utf-8 -*-
"""association_rules.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SYcQ0wFKS-r_xncBhvSmM2Rz7Bh3Uq8S
"""

import pandas as pd
import numpy as np
from patterns import association_rules, apriori

df = pd.read_csv("movies.csv")
df.replace("nan", np.nan, inplace=True)
df = df.dropna()

df["Genre"] = df["Genre"].astype(str)
df["Genre"].str.split(",").apply(
    lambda genres: frozenset(genre.strip() for genre in genres if genre)
).tolist()
df["Actors"] = df["Actors"].astype(str)
df["Actors"].str.split(",").apply(
    lambda actors: frozenset(actor.strip() for actor in actors if actor)
).tolist()
df["Director"] = df["Director"].astype(str)
df["Director"].str.split(",").apply(
    lambda dirs: frozenset(dir.strip() for dir in dirs if dir)
).tolist()


def bin_box_office(value):
    if pd.isna(value):
        return "Unknown BoxOffice"

    # If already a float, skip string cleaning
    if isinstance(value, float):
        revenue = value
    else:
        # Remove $ and commas, and convert to float
        revenue = float(value.replace("$", "").replace(",", ""))

    if revenue < 50_000_000:  # Less than 50 million
        return "Low BoxOffice"
    elif 50_000_000 <= revenue <= 100_000_000:
        return "Average BoxOffice"
    else:  # 100 million or more
        return "High BoxOffice"


df["BoxOfficeRev"] = df["BoxOffice"].apply(bin_box_office)


def bin_imdb_rating(rating):
    if rating < 5:
        return "Low imdbRating"
    elif 5 <= rating < 7:
        return "Average imdbRating"
    else:
        return "High imdbRating"


df["imdbRatingCategory"] = df["imdbRating"].astype(float).apply(bin_imdb_rating)


itemsets = df[
    [
        "Actors",
        "Writer",
        "Genre",
        "Director",
        "Language",
        "Country",
        "Rated",
        "BoxOfficeRev",
        "imdbRatingCategory",
    ]
].apply(lambda row: frozenset(row.dropna()), axis=1)


transactions = itemsets

min_support = 0.05
frequent_itemsets = apriori(transactions, min_support=0.25)
min_confidence = 0.4
rules = association_rules(transactions, frequent_itemsets, min_confidence=0.6)


print("\nFrequent Itemsets:")
for itemset, support in frequent_itemsets:
    print(f"Itemset: {set(itemset)}, Support: {support:.4f}")

print("\nAssociation Rules:")
for antecedent, consequent, confidence in rules:
    print(f"Rule: {set(antecedent)} -> {set(consequent)}, Confidence: {confidence:.4f}")
